
#pragma kernel CSMain

RWTexture2D<float4> Result;
RWTexture2D<float1> Mask;
RWTexture2D<float1> CameraDepth;

float DepthThresholdLow, DepthThresholdHigh;
uint Width, Height;

void SetMask (uint3 id)
{
    float2 dimensions = id.xy / float2(Width,Height);

    float depthValue = CameraDepth[id.xy];

    uint mask = (depthValue < DepthThresholdLow || depthValue > DepthThresholdHigh) ? 0 : 1;

    Mask[id.xy] = float1(mask);
}

bool ComparePixels(float4 pixelA, float4 pixelB)
{

    return (0.2126*pixelA.r + 0.7152*pixelA.g + 0.0722*pixelA.b) < (0.2126*pixelB.r + 0.7152*pixelB.g + 0.0722*pixelB.b);
}

void SwapPixels(float4 pixelA, float4 pixelB)
{
    if (ComparePixels(pixelA, pixelB))
    {
        float4 temp = pixelA;
        pixelA = pixelB;
        pixelB = temp;
    }
}

void SimpleSort()
{

}

void FlipSort()
{

}

void SlideSort()
{

}

void Sort()
{
    SimpleSort();
    // n represents the cycle it is currently on
    for (uint n = 0; n<Height/2; n++)
    {
        FlipSort();
        SlideSort();
    }
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= Width || id.y >= Height)
        return;

    SetMask(id);

    GroupMemoryBarrierWithGroupSync();

    Sort();
}

