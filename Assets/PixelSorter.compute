
#pragma kernel CSMain

RWTexture2D<float4> Result;
RWTexture2D<float1> Mask;
RWTexture2D<float1> CameraDepth;

float DepthThresholdLow, DepthThresholdHigh;
uint Width, Height;

void SetMask (uint3 id)
{
    float2 dimensions = id.xy / float2(Width,Height);

    float depthValue = CameraDepth[id.xy];

    uint mask = (depthValue < DepthThresholdLow || depthValue > DepthThresholdHigh) ? 0 : 1;

    Mask[id.xy] = float1(mask);
}

float GetLuminance(uint2 pixelID)
{
    return (0.2126 * Result[pixelID].r + 0.7152 * Result[pixelID].g + 0.0722 * Result[pixelID].b);
}

bool ComparePixels(float2 pixelAID, float2 pixelBID)
{
    return GetLuminance(pixelAID) < GetLuminance(pixelBID) && Mask[pixelAID] == 1 && Mask[pixelBID] == 1;
}

void SwapPixels(uint2 pixelAID, uint2 pixelBID)
{
    if (ComparePixels(pixelAID, pixelBID))
    {
        float4 temp = Result[pixelAID];
        Result[pixelAID] = Result[pixelBID];
        Result[pixelBID] = temp;
    }
}
void BitonicSort(uint2 id, uint lenght)
{
    // for each loop the lenght of the current bitonic sequence is doubled
    for (uint currentSequenceLenght = 2; currentSequenceLenght <= lenght; currentSequenceLenght *= 2)
    {
        // for each pass the comparison distance between elements is halved
        for (uint comparisonDistance = currentSequenceLenght / 2; comparisonDistance >= 1; comparisonDistance /= 2)
        {
            // run for each element
            for (uint n = 0; n < comparisonDistance; n++)
            {
                uint2 comparisonID = uint2 ((id.x + comparisonDistance),id.y);

                if (comparisonID.x > id.x) // Ensure each pair is processed only once
                {
                    SwapPixels(id, comparisonID);
                }
            }
        }
    }
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= Width || id.y >= Height)
        return;

    SetMask(id);

    GroupMemoryBarrierWithGroupSync();

    uint2 pixelID = id.xy;
    BitonicSort(pixelID, Width);
}